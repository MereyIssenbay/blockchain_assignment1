process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Home\myfile\AITU\Prog\Blockchain_2\generate-keypair\node_modules\.bin\esrun-1712148009396.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// send-ping-transaction.ts
import * as web3 from "../../node_modules/@solana/web3.js/lib/index.cjs.js";
import dotenv from "../../node_modules/dotenv/lib/main.js";
import { getKeypairFromEnvironment, airdropIfRequired } from "../../node_modules/@solana-developers/helpers/dist/index.js";
dotenv.config();
var PING_PROGRAM_ADDRESS = new web3.PublicKey("ChT1B39WKLS8qUrkLvFDXMhEJ4F1XZzwUNHUt4AU9aVa");
var PING_PROGRAM_DATA_ADDRESS = new web3.PublicKey("Ah9K7dQ8EHaZqcAsgBW8w37yN2eAy3koFmUn4x3CJtod");
var payer = getKeypairFromEnvironment("SECRET_KEY");
var connection = new web3.Connection(web3.clusterApiUrl("devnet"));
var newBalance = await airdropIfRequired(
  connection,
  payer.publicKey,
  1 * web3.LAMPORTS_PER_SOL,
  0.5 * web3.LAMPORTS_PER_SOL
);
var transaction = new web3.Transaction();
var programId = new web3.PublicKey(PING_PROGRAM_ADDRESS);
var pingProgramDataId = new web3.PublicKey(PING_PROGRAM_DATA_ADDRESS);
var instruction = new web3.TransactionInstruction({
  keys: [
    {
      pubkey: pingProgramDataId,
      isSigner: false,
      isWritable: true
    }
  ],
  programId
});
transaction.add(instruction);
var signature = await web3.sendAndConfirmTransaction(
  connection,
  transaction,
  [payer]
);
console.log(`\u2705 Transaction completed! Signature is ${signature}`);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic2VuZC1waW5nLXRyYW5zYWN0aW9uLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiQzpcXEhvbWVcXG15ZmlsZVxcQUlUVVxcUHJvZ1xcQmxvY2tjaGFpbl8yXFxnZW5lcmF0ZS1rZXlwYWlyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCAqIGFzIHdlYjMgZnJvbSBcIkBzb2xhbmEvd2ViMy5qc1wiO1xyXG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcclxuZG90ZW52LmNvbmZpZygpO1xyXG5pbXBvcnQgeyBnZXRLZXlwYWlyRnJvbUVudmlyb25tZW50LCBhaXJkcm9wSWZSZXF1aXJlZCB9IGZyb20gXCJAc29sYW5hLWRldmVsb3BlcnMvaGVscGVyc1wiO1xyXG5cclxuY29uc3QgUElOR19QUk9HUkFNX0FERFJFU1MgPSBuZXcgd2ViMy5QdWJsaWNLZXkoJ0NoVDFCMzlXS0xTOHFVcmtMdkZEWE1oRUo0RjFYWnp3VU5IVXQ0QVU5YVZhJylcclxuY29uc3QgUElOR19QUk9HUkFNX0RBVEFfQUREUkVTUyA9ICBuZXcgd2ViMy5QdWJsaWNLZXkoJ0FoOUs3ZFE4RUhhWnFjQXNnQlc4dzM3eU4yZUF5M2tvRm1VbjR4M0NKdG9kJylcclxuXHJcbmNvbnN0IHBheWVyID0gZ2V0S2V5cGFpckZyb21FbnZpcm9ubWVudCgnU0VDUkVUX0tFWScpXHJcbmNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgd2ViMy5Db25uZWN0aW9uKHdlYjMuY2x1c3RlckFwaVVybCgnZGV2bmV0JykpXHJcblxyXG5jb25zdCBuZXdCYWxhbmNlID0gYXdhaXQgYWlyZHJvcElmUmVxdWlyZWQoXHJcbiAgY29ubmVjdGlvbixcclxuICBwYXllci5wdWJsaWNLZXksXHJcbiAgMSAqIHdlYjMuTEFNUE9SVFNfUEVSX1NPTCxcclxuICAwLjUgKiB3ZWIzLkxBTVBPUlRTX1BFUl9TT0wsXHJcbik7XHJcblxyXG5jb25zdCB0cmFuc2FjdGlvbiA9IG5ldyB3ZWIzLlRyYW5zYWN0aW9uKClcclxuY29uc3QgcHJvZ3JhbUlkID0gbmV3IHdlYjMuUHVibGljS2V5KFBJTkdfUFJPR1JBTV9BRERSRVNTKVxyXG5jb25zdCBwaW5nUHJvZ3JhbURhdGFJZCA9IG5ldyB3ZWIzLlB1YmxpY0tleShQSU5HX1BST0dSQU1fREFUQV9BRERSRVNTKVxyXG5cclxuY29uc3QgaW5zdHJ1Y3Rpb24gPSBuZXcgd2ViMy5UcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcclxuICBrZXlzOiBbXHJcbiAgICB7XHJcbiAgICAgIHB1YmtleTogcGluZ1Byb2dyYW1EYXRhSWQsXHJcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcclxuICAgICAgaXNXcml0YWJsZTogdHJ1ZVxyXG4gICAgfSxcclxuICBdLFxyXG4gIHByb2dyYW1JZFxyXG59KVxyXG5cclxudHJhbnNhY3Rpb24uYWRkKGluc3RydWN0aW9uKVxyXG5cclxuY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgd2ViMy5zZW5kQW5kQ29uZmlybVRyYW5zYWN0aW9uKFxyXG4gIGNvbm5lY3Rpb24sXHJcbiAgdHJhbnNhY3Rpb24sXHJcbiAgW3BheWVyXVxyXG4pXHJcblxyXG5jb25zb2xlLmxvZyhgXHUyNzA1IFRyYW5zYWN0aW9uIGNvbXBsZXRlZCEgU2lnbmF0dXJlIGlzICR7c2lnbmF0dXJlfWApIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFlBQVksVUFBVTtBQUN0QixPQUFPLFlBQVk7QUFFbkIsU0FBUywyQkFBMkIseUJBQXlCO0FBRDdELE9BQU8sT0FBTztBQUdkLElBQU0sdUJBQXVCLElBQVMsZUFBVSw4Q0FBOEM7QUFDOUYsSUFBTSw0QkFBNkIsSUFBUyxlQUFVLDhDQUE4QztBQUVwRyxJQUFNLFFBQVEsMEJBQTBCLFlBQVk7QUFDcEQsSUFBTSxhQUFhLElBQVMsZ0JBQWdCLG1CQUFjLFFBQVEsQ0FBQztBQUVuRSxJQUFNLGFBQWEsTUFBTTtBQUFBLEVBQ3ZCO0FBQUEsRUFDQSxNQUFNO0FBQUEsRUFDTixJQUFTO0FBQUEsRUFDVCxNQUFXO0FBQ2I7QUFFQSxJQUFNLGNBQWMsSUFBUyxpQkFBWTtBQUN6QyxJQUFNLFlBQVksSUFBUyxlQUFVLG9CQUFvQjtBQUN6RCxJQUFNLG9CQUFvQixJQUFTLGVBQVUseUJBQXlCO0FBRXRFLElBQU0sY0FBYyxJQUFTLDRCQUF1QjtBQUFBLEVBQ2xELE1BQU07QUFBQSxJQUNKO0FBQUEsTUFDRSxRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixZQUFZO0FBQUEsSUFDZDtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQ0YsQ0FBQztBQUVELFlBQVksSUFBSSxXQUFXO0FBRTNCLElBQU0sWUFBWSxNQUFXO0FBQUEsRUFDM0I7QUFBQSxFQUNBO0FBQUEsRUFDQSxDQUFDLEtBQUs7QUFDUjtBQUVBLFFBQVEsSUFBSSw4Q0FBeUMsV0FBVzsiLAogICJuYW1lcyI6IFtdCn0K

	